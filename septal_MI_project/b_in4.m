function b_in4%IN4 Data file input.%   You have to chose a data file from the DATADIR directory (containing the raw data files)%   specified in STARTUP. You can also specify an input interval.%%   In contrast to IN3, import variables (declared global) are created in the base workspace%   as well.%%   See also IN3 and STARTUP.% Input arguments checkerror(nargchk(0,0,nargin));% Check if STARTUP was run & DATADIR was not deletedglobal DATADIRif isempty(DATADIR)    clear glogal DATADIR;    b_startupend% New input decisionglobal INif isempty(IN) == 0    data = IN{1};    eeg = IN{2};    fname = IN{3};    pathname = IN{4};    datinx1 = IN{5};    datinx2 = IN{6};    time = IN{7};    unit = IN{8};    dt = IN{9};    meret = IN{10};    mintafr = IN{11};    xlimit = IN{12};    van = input(['Do you want to analyse the inported ' fname(1:6) ' cell? /YES: Enter; NO: 0/ ']);    fnam = fname;else    van = 0;end% Loadingcurrentdir = pwd;if isempty(IN) | isempty(van) == 0    global DATADIR    cd(DATADIR);    [fname pathname] = uigetfile({'*.*',  'All Files (*.*)';'*.txt', 'ASCII Files (*.txt)'; ...            '*.mat', 'Mat Files (*.mat)'},'Select a file');    cd(currentdir);    if fname ~= 0,        fn = fullfile(pathname,fname);        disp(['IMPORTING DATA OF ' fname(1:6) ' ...']);        data = load(fn);        % Giving the final form of variable 'data'        if isstruct(data)            field = fieldnames(data);            s = struct('type','.','subs',field);            data = subsref(data,s);            if size(data,2) == 1,                data = [data(1:length(data)/2,1) data((length(data)/2)+1:length(data),1)];             end            % Converting the extension from txt to mat        else             pont = findstr(fname,'.');            if ~isempty(pont),                 fname = fname(1:pont(1)-1);             end            fn = fullfile(pathname,fname);            disp('SAVING THE .mat FORMAT OF THE DATA IN THE DIRECTORY WHERE THE .txt FILE WAS.');            if size(data,2) == 1,                 data = [data(1:length(data)/2,1) data((length(data)/2)+1:length(data),1)];             end            save(fn,'data');            fname = [fname '.mat'];        end% Failure message        uj = 1;    else disp('New data has not been inported.');        uj = 0;        if exist('fnam')            fname = fnam;         end        return     end    % Specifying the interval    meret = size(data,1);    kiir = ['Maximum: 1-' num2str(meret)];    disp(kiir);    datinx1 = input(' FIRST POINT OF THE INTERVAL = ');    datinx2 = input(' LAST POINT OF THE INTERVAL = ');    unit = data(datinx1:datinx2,2)';    eeg = data(datinx1:datinx2,1)'; else uj = 0;    disp(['The actual interval is: ' num2str(datinx1) '-' num2str(datinx2)]);    dont = input('Does the interval remain? /YES: Enter; NO: 0/ ');    if ~isempty(dont);        meret = size(data,1);        kiir = ['Maximum: 1-' num2str(meret)];        disp(kiir);        datinx1 = input(' FIRST POINT OF THE INTERVAL= ');        datinx2 = input(' LAST POINT OF THE INTERVAL = ');        unit = data(datinx1:datinx2,2);         unit = unit';        eeg = data(datinx1:datinx2,1);         eeg = eeg';    else disp('The interval has not changed');    endendkiir = ['The actual data is: ' num2str(fname(1:6)) ' with active interval: ' num2str(datinx1) ...        '-' num2str(datinx2)];disp(kiir);% Defining the variable 'IN'dt = 0.0001; mintafr = 1 / dt;time = [0:length(unit)-1] * dt; xlimit = [min(time),max(time)];clear global INglobal ININ = cell(1,12);IN{1} = data;IN{2} = eeg;IN{3} = fname;IN{4} = pathname;IN{5} = datinx1;IN{6} = datinx2;IN{7} = time;IN{8} = unit;IN{9} = dt;IN{10} = meret;IN{11} = mintafr;IN{12} = xlimit;% Assign variables in base workspaceb_var2ws('in','base')